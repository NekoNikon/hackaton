{"version":3,"sources":["modules/Error404.js","images/duck.jpg","core/functions.js","config/constants.js","core/Header1.js","modules/Login.js","components/adminPanel/pages/MarkTable.js","components/adminPanel/pages/UsersPage.js","components/adminPanel/pages/DocumentStatusesPage.js","components/adminPanel/AdminPanel.js","components/adminPanel/pages/DocumentRoutesPage.js","components/adminPanel/pages/PositionsPage.js","components/account/Account.js","core/Context.js","components/DocumentControl/DropdownMenuRow.js","components/DocumentControl/StudyLine.js","components/DocumentControl/StudyGrid.js","components/DocumentControl/StudyPage.js","components/Interests/InterestsTags.js","components/Interests/InterestsAccounts.js","components/Interests/InterestsProf.js","components/Interests/InterestsPage.js","index.js"],"names":["Error404","status","title","subTitle","extra","type","to","MergeRecursive","obj1","obj2","p","constructor","Object","e","checkObject","object","data","request","eval","undefined","handlerQuery","GQL","query","options","auth","useState","subscribe","setSubscribe","reqQuery","useQuery","select","assign","useEffect","error","notification","message","duration","placement","subscription","value","subscribeToMore","document","variables","updateQuery","prev","subscriptionData","refetch","handlerMutation","fn","promissOK","loading","keys","isAccessed","user","accesses","admin","some","access","includes","authMe","one","gql","positions","useUser","positionsData","positionNames","position_names","accessesData","filter","el","id","username","domain_username","fio","role_id","documentControl","insert","update","delete","approved","onApproval","rejected","approvedUser","rejectedUser","isDocumentStatusChangeAllowed","isItemStatusChangeAllowed","documentReport","documentHistory","documentSearch","adminDepartment","accessRedirect","Component","props","pathname","useLocation","path_test","split","download","url","filename","a","fetch","mode","response","blob","elm","createElement","href","URL","createObjectURL","setAttribute","click","remove","console","log","getDDMMYYY","date","Date","today","dd","getDate","mm","getMonth","yyyy","getFullYear","getFirstMonthDate","anydate","today_tmp","getTime","getTimezoneOffset","myDate","setHours","setMonth","setDate","formatDate","timestamp","d","notifyMe","text","window","Notification","permission","body","icon","notif_image","requireInteraction","requestPermission","then","catch","err","constants","debug","port","host","SERVER_DATA","graphql","path","Header","Layout","useBreakpoint","Grid","Header1","React","memo","screens","history","useHistory","content","className","style","padding","backgroundColor","justify","align","paddingLeft","flex","color","backIcon","ArrowLeftOutlined","onBack","push","sm","trigger","BellFilled","shape","size","UserOutlined","marginRight","direction","width","overlay","Item","danger","onClick","textAlign","CrownOutlined","target","ReadOutlined","technicalDepartment","location","LogoutOutlined","preventDefault","fontSize","loginGQL","Login","setUser","useMutation","login","requestOptions","method","headers","Headers","Accept","JSON","stringify","Form","useForm","form","height","name","onFinish","onFinishFailed","errorInfo","gutter","rules","required","placeholder","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","htmlType","columns","dataIndex","key","render","subject","mark","MarkTable","pagination","dataSource","Meta","Card","UsersPage","hoverable","cover","alt","src","description","span","Content","withRouter","Footer","Sider","slice","margin","minHeight","component","updateUserPassword","versionCheck","Account","password","setPassword","password2","setPassword2","load","setLoad","getUser","onCompleted","onError","dataPassword","loadingMutation","errorMutation","versionData","theme","top","application","platform_version","database_version","onChange","length","Context","createContext","DropdownMenuRow","menu","rel","DownOutlined","StudyLine","Text","marginBottom","strong","dot","ClockCircleOutlined","CloseCircleOutlined","marginLeft","background","StudyGrid","setPath","edus","map","item","underline","offset","Option","DatePicker","RangePicker","Typography","Title","Select","edus_list","specials","type_path","StudyPage","context","setContext","Provider","layout","label","showSearch","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","filterSort","optionA","optionB","localeCompare","i","specs","InterestsTags","state","tags","inputVisible","inputValue","handleClose","removedTag","tag","setState","showInput","focus","handleInputChange","handleInputConfirm","saveInputRef","forMap","tagElem","closable","onClose","display","this","tagChild","TweenOneGroup","enter","scale","opacity","onEnd","leave","appear","ref","onBlur","onPressEnter","PlusOutlined","formItemLayout","labelCol","xs","wrapperCol","formItemLayoutWithOutLabel","InterestsAccounts","type_acc","values","List","validator","_","names","Promise","reject","Error","fields","add","errors","field","index","validateTrigger","whitespace","noStyle","MinusCircleOutlined","ErrorList","InterestsProf","header","bordered","prof_data","renderItem","InterestsPage","httpLink","HttpLink","uri","wsLink","WebSocketLink","reconnect","errorLink","graphQLErrors","networkError","locations","authLink","token","localStorage","getItem","authorization","splitLink","definition","getMainDefinition","kind","operation","concat","client","ApolloClient","link","ApolloLink","from","cache","InMemoryCache","StudyPageP","DesktopOutlined","InterestsPageP","BarChartOutlined","documentHistoryP","documentSearchP","DatabaseOutlined","StartPage","paddingTop","transform","position","App","exact","AdminPanel","ReactDOM","ApolloProvider","locale","ru_RU","getElementById"],"mappings":"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","file":"static/js/main.7ab1b12f.chunk.js","sourcesContent":["import {Button, Result} from \"antd\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <Result\r\n            status=\"404\"\r\n            title=\"404\"\r\n            subTitle='Упс, страница не найдена или нет доступа.'\r\n            extra={<Button type=\"primary\"><NavLink to='/'>На главную</NavLink></Button>}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Error404;","export default __webpack_public_path__ + \"static/media/duck.dcaac10b.jpg\";","import { notification } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { useState } from \"react\";\r\nimport { useLocation, Redirect } from 'react-router-dom';\r\nimport Error404 from \"../modules/Error404\";\r\n\r\nimport notif_image from \"../images/duck.jpg\";\r\n\r\nexport const MergeRecursive = (obj1 = {}, obj2 = {}) => {\r\n    for (var p in obj2) {\r\n        try {\r\n            if (obj2[p].constructor === Object) {\r\n                obj1[p] = MergeRecursive(obj1[p], obj2[p]);\r\n            } else {\r\n                obj1[p] = obj2[p];\r\n            }\r\n        } catch (e) {\r\n            obj1[p] = obj2[p];\r\n        }\r\n    }\r\n    return obj1;\r\n}\r\n\r\nexport const checkObject = (object, data) => {\r\n    let request = ''\r\n    try {\r\n        request = eval(`object.${data}`);\r\n    } catch (e) {\r\n        return request;\r\n    }\r\n    if (request === undefined) {\r\n        return '';\r\n    }\r\n    return request;\r\n}\r\n\r\n\r\nexport const handlerQuery = (GQL, query, options, auth) => {\r\n    return () => {\r\n        let [subscribe, setSubscribe] = useState(false)\r\n        let reqQuery = useQuery(GQL.select[query], Object.assign({}, MergeRecursive((GQL.options && GQL.options[query]) ? GQL.options[query] : {}, options)))\r\n        useEffect(() => {\r\n            if (reqQuery.error) {\r\n                notification['error']({ message: reqQuery.error.message, duration: 0, placement: 'bottomRight' })\r\n            }\r\n        }, [reqQuery.error]);\r\n        useEffect(() => {\r\n            if (GQL.subscription[query] && reqQuery.data && !subscribe) {\r\n                if (GQL.subscription[query][0]) {\r\n                    for (let value in GQL.subscription[query]) {\r\n                        reqQuery.subscribeToMore({\r\n                            document: GQL.subscription[query][value],\r\n                            variables: Object.assign({}, MergeRecursive((GQL.options && GQL.options[query]) ? GQL.options[query] : {}, options)).variables,\r\n                            updateQuery: (prev, { subscriptionData }) => {\r\n                                if (auth) {\r\n                                    reqQuery.refetch();\r\n                                    return prev;\r\n                                }\r\n                                if (!subscriptionData.data) return prev;\r\n                                return Object.assign({}, prev, { ...prev, ...subscriptionData.data });\r\n                            }\r\n                        })\r\n                    }\r\n                } else {\r\n                    reqQuery.subscribeToMore({\r\n                        document: GQL.subscription[query],\r\n                        variables: Object.assign({}, MergeRecursive((GQL.options && GQL.options[query]) ? GQL.options[query] : {}, options)).variables,\r\n                        updateQuery: (prev, { subscriptionData }) => {\r\n                            if (auth) {\r\n                                reqQuery.refetch();\r\n                                return prev;\r\n                            }\r\n                            if (!subscriptionData.data) return prev;\r\n                            return Object.assign({}, prev, { ...prev, ...subscriptionData.data });\r\n                        }\r\n                    })\r\n                }\r\n                setSubscribe(true);\r\n            }\r\n        }, [reqQuery.data]);\r\n\r\n        return reqQuery;\r\n    }\r\n}\r\nexport const handlerMutation = ([fn, object], promissOK = () => { }) => {\r\n    return () => {\r\n        useEffect(() => {\r\n            if (!object.loading) {\r\n                if (object.error) {\r\n                    notification['error']({ message: object.error.message, duration: 0, placement: 'bottomRight' })\r\n                }\r\n            }\r\n        }, [object.error]);\r\n        useEffect(() => {\r\n            if (object.data) {\r\n                let request = object.data[Object.keys(object.data)[0]]\r\n                if (request.type == 'warning') {\r\n                    notification['warning']({ message: request.message, duration: 0, placement: 'bottomRight' })\r\n                } else {\r\n                    notification['success']({ message: request.message, duration: 10, placement: 'bottomRight' })\r\n                }\r\n                promissOK();\r\n            }\r\n        }, [object.data]);\r\n        return [fn, object]\r\n    }\r\n}\r\n\r\n\r\nexport const isAccessed = (user, accesses) => {\r\n    if (user.admin) {\r\n        return true\r\n    }\r\n    else {\r\n        return accesses.some(access => user.accesses.includes(access));\r\n    }\r\n}\r\n\r\n\r\nlet authMe = {\r\n    options: {\r\n        //one: { variables: { test: { test: 'test' } } }\r\n    },\r\n    select: {\r\n        one: gql`\r\n            query authMe($test: JSON) {\r\n                authMe(test: $test) {\r\n\t\t\t\t\tid\r\n                    username\r\n                    admin\r\n                    accesses\r\n                    positions\r\n                    domain_username\r\n                    fio\r\n                    position_names\r\n                }\r\n            }\r\n        `\r\n    },\r\n    subscription: {\r\n        one: gql`\r\n            subscription authMe($test: JSON) {\r\n                authMe(test: $test) {\r\n\t\t\t\t\tid\r\n                    username\r\n                    admin\r\n                    accesses\r\n                    positions\r\n                    domain_username\r\n                    fio\r\n                    position_names\r\n                }\r\n            }\r\n\r\n        `\r\n    }\r\n}\r\n\r\nlet positions = gql`\r\n            query positions ($positions: JSON) {\r\n                positions (positions: $positions) {\r\n                    id\r\n                    name\r\n                    accesses\r\n                }\r\n            }\r\n        `;\r\n\r\nexport const useUser = () => {\r\n\r\n    let variables = {};\r\n\r\n    let query = handlerQuery(authMe, 'one', { variables }, 'auth')();\r\n\r\n    const { loading: positionsLoading, data: positionsData, refetch: positionsRefetch } = useQuery(positions);\r\n\r\n    /*const { loading: positionsLoading, data: positionsData, refetch: positionsRefetch } = useQuery(\r\n        positions, {\r\n            onCompleted: (data) => {\r\n                setPos(data)\r\n            }\r\n    });*/\r\n\r\n    let user = query.data ? query.data.authMe[0] : undefined;\r\n    let positionNames = user ? query.data.authMe[0].position_names : [];\r\n\r\n    //let accesses = user ? query.data.authMe[0].accesses : [];\r\n    let accessesData = user && user.positions ? positionsData?.positions.filter((el) => { return el.id == user.positions[0] }) : [];\r\n    let accesses = accessesData && accessesData[0] ? accessesData[0].accesses : [];\r\n\r\n    let admin = user ? user.admin : undefined;\r\n    //console.log('positionNames', positionNames)\r\n    return {\r\n        query,\r\n        id: user ? user.id : undefined,\r\n        username: user ? user.username : undefined,\r\n        domain_username: user ? user.domain_username : undefined,\r\n        fio: user ? user.fio : undefined,\r\n        admin: user ? user.admin : undefined,\r\n        role_id: user ? user.role_id : undefined,\r\n        positions: admin ? [1, 2, 3, 4, 5, 6] : user?.positions,\r\n        position_names: positionNames,\r\n        documentControl: {\r\n            select: admin ? true : accesses.includes('/document-control-p/select'),\r\n            insert: admin ? true : accesses.includes('/document-control-p/insert'),\r\n            update: admin ? true : accesses.includes('/document-control-p/update'),\r\n            delete: admin ? true : accesses.includes('/document-control-p/delete'),\r\n            approved: {\r\n                select: admin ? true : accesses.includes('/document-control-p/approved-p/select')\r\n            },\r\n            onApproval: {\r\n                select: admin ? true : accesses.includes('/document-control-p/on-approval-p/select')\r\n            },\r\n            rejected: {\r\n                select: admin ? true : accesses.includes('/document-control-p/rejected-p/select')\r\n            },\r\n            approvedUser: {\r\n                select: admin ? true : accesses.includes('/document-control-p/approveduser-p/select')\r\n            },\r\n            rejectedUser: {\r\n                select: admin ? true : accesses.includes('/document-control-p/rejecteduser-p/select')\r\n            },\r\n            isDocumentStatusChangeAllowed: admin ? true : accesses.includes('/document-control-p/document-status-change'),\r\n            isItemStatusChangeAllowed: admin ? true : accesses.includes('/document-control-p/item-status-change'),\r\n        },\r\n        documentReport: {\r\n            select: admin ? true : accesses.includes('/document-report-p/select'),\r\n            insert: admin ? true : accesses.includes('/document-report-p/insert'),\r\n            update: admin ? true : accesses.includes('/document-report-p/update'),\r\n            delete: admin ? true : accesses.includes('/document-report-p/delete'),\r\n            isDocumentStatusChangeAllowed: admin ? true : accesses.includes('/document-report-p/document-status-change'),\r\n            isItemStatusChangeAllowed: admin ? true : accesses.includes('/document-report-p/item-status-change'),\r\n        },\r\n        documentHistory: {\r\n            select: admin ? true : accesses.includes('/document-history-p/select'),\r\n            insert: admin ? true : accesses.includes('/document-history-p/insert'),\r\n            update: admin ? true : accesses.includes('/document-history-p/update'),\r\n            delete: admin ? true : accesses.includes('/document-history-p/delete'),\r\n            isDocumentStatusChangeAllowed: admin ? true : accesses.includes('/document-history-p/document-status-change'),\r\n            isItemStatusChangeAllowed: admin ? true : accesses.includes('/document-history-p/item-status-change'),\r\n        },\r\n        documentSearch: {\r\n            select: admin ? true : accesses.includes('/document-search-p/select'),\r\n            insert: admin ? true : accesses.includes('/document-search-p/insert'),\r\n            update: admin ? true : accesses.includes('/document-search-p/update'),\r\n            delete: admin ? true : accesses.includes('/document-search-p/delete'),\r\n            isDocumentStatusChangeAllowed: admin ? true : accesses.includes('/document-search-p/document-status-change'),\r\n            isItemStatusChangeAllowed: admin ? true : accesses.includes('/document-search-p/item-status-change'),\r\n        },\r\n        adminDepartment: {\r\n            select: admin ? true : accesses.includes('/admin-p/select'),\r\n            insert: admin ? true : accesses.includes('/admin-p/insert'),\r\n            update: admin ? true : accesses.includes('/admin-p/update'),\r\n            delete: admin ? true : accesses.includes('/admin-p/delete'),\r\n            isDocumentStatusChangeAllowed: admin ? true : accesses.includes('/admin-p/document-status-change'),\r\n            isItemStatusChangeAllowed: admin ? true : accesses.includes('/admin-p/item-status-change'),\r\n        }\r\n    }\r\n};\r\n\r\nexport const accessRedirect = (Component) => {\r\n    let accessRedirect = (props) => {\r\n        let { pathname } = (() => { return useLocation() })();\r\n        let user = (() => { return useUser() })();\r\n\r\n        //console.log(pathname);\r\n        const path_test = pathname.split(\"/\");\r\n        //console.log('path_test',path_test);\r\n        if (user.query.loading) { return <>Loading...</> }\r\n        switch (pathname) {\r\n            case '/':\r\n                if (!user.username) { return <Redirect to='/login' /> } break;\r\n            case '/login': case '/login/':\r\n                if (user.username) { return <Redirect to='/' /> } break;\r\n            case '/logout': case '/logout/':\r\n                if (!user.username) { return <Redirect to='/' /> } break;\r\n            // Account\r\n            case '/account': case '/account/':\r\n                if (!user.username) { return <Redirect to='/account' /> } break;\r\n\r\n            // admin\r\n            case '/admin': case '/admin/':\r\n                if (!user.admin) { return <Redirect /> } break;\r\n            case '/graphql': case '/graphql/':\r\n                if (!user.admin) { return <Redirect /> } break;\r\n            case '/admin/registration': case '/admin/registration/':\r\n                if (!user.admin) { return <Redirect /> } break;\r\n            case '/admin/positions-page': case '/admin/positions-page/':\r\n                if (!user.admin) { return <Redirect /> } break;\r\n            case '/admin/document-statuses-page': case '/admin/document-statuses-page/':\r\n                if (!user.admin) { return <Redirect /> } break;\r\n            case '/admin/document-routes-page': case '/admin/document-routes-page/':\r\n                if (!user.admin) { return <Redirect /> } break;\r\n\r\n            //components\r\n            case '/document-control': case '/document-control/': case '/document-control/' + path_test[2]:\r\n                if (!user.documentControl.select) { return <Redirect /> } break;\r\n            case '/document-control/my': case '/document-control/my/': case '/document-control/my/' + path_test[2]:\r\n                if (!user.documentControl.select) { return <Redirect /> } break;\r\n\r\n            case '/document-control/approved': case '/document-control/approved/': case '/document-control/approved/' + path_test[2]:\r\n                if (!user.documentControl.approved.select) { return <Redirect /> } break;\r\n            case '/document-control/on-approval': case '/document-control/on-approval/': case '/document-control/on-approval/' + path_test[2]:\r\n                if (!user.documentControl.onApproval.select) { return <Redirect /> } break;\r\n            case '/document-control/rejected': case '/document-control/rejected/': case '/document-control/rejected/' + path_test[2]:\r\n                if (!user.documentControl.rejected.select) { return <Redirect /> } break;\r\n\r\n            case '/document-control/approveduser': case '/document-control/approveduser/': case '/document-control/approveduser/' + path_test[2]:\r\n                if (!user.documentControl.approvedUser.select) { return <Redirect /> } break;\r\n            case '/document-control/rejecteduser': case '/document-control/rejecteduser/': case '/document-control/rejecteduser/' + path_test[2]:\r\n                if (!user.documentControl.rejectedUser.select) { return <Redirect /> } break;\r\n\r\n            case '/document-report': case '/document-report/': case '/document-report/' + path_test[2]:\r\n                if (!user.documentReport.select) { return <Redirect /> } break;\r\n            case '/document-history': case '/document-history/': case '/document-history/' + path_test[2]:\r\n                if (!user.documentHistory.select) { return <Redirect /> } break;\r\n            // case '/admin-department': case '/admin-department/': case '/admin-department/' + path_test[2]:\r\n            //     if (!user.adminDepartment.select) { return <Redirect /> } break;\r\n            case '/document-search': case '/document-search/': case '/document-search/' + path_test[2]:\r\n                if (!user.documentSearch.select) { return <Redirect /> } break;\r\n\r\n            default:\r\n                return <Error404 />;\r\n        }\r\n        return <Component {...props} />\r\n    }\r\n\r\n    return accessRedirect;\r\n}\r\n\r\n\r\nexport const download = async (url, filename) => {\r\n    let response = await fetch(url, {\r\n        mode: 'no-cors'\r\n        /*\r\n        * ALTERNATIVE MODE {\r\n        mode: 'cors'\r\n        }\r\n        *\r\n        */\r\n    });\r\n    try {\r\n        let data = await response.blob();\r\n        let elm = document.createElement('a');  // CREATE A LINK ELEMENT IN DOM\r\n        elm.href = URL.createObjectURL(data);  // SET LINK ELEMENTS CONTENTS\r\n        elm.setAttribute('download', filename); // SET ELEMENT CREATED 'ATTRIBUTE' TO DOWNLOAD, FILENAME PARAM AUTOMATICALLY\r\n        elm.click();                             // TRIGGER ELEMENT TO DOWNLOAD\r\n        elm.remove();\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const getDDMMYYY = (date = new Date) => {\r\n    let today = new Date(date);\r\n    let dd = today.getDate();\r\n    let mm = today.getMonth() + 1; //January is 0!\r\n    let yyyy = today.getFullYear();\r\n\r\n    if (dd < 10) {\r\n        dd = '0' + dd\r\n    }\r\n    if (mm < 10) {\r\n        mm = '0' + mm\r\n    }\r\n\r\n    today = dd + '-' + mm + '-' + yyyy;\r\n    return today;\r\n}\r\n\r\nexport const getFirstMonthDate = (anydate = new Date) => {\r\n    let today_tmp = new Date(anydate);\r\n    let today = new Date(today_tmp.getTime() - today_tmp.getTimezoneOffset() * 60 * 1000);\r\n    let myDate = today;\r\n    myDate.setHours(0, 0, 0, 0); // начало текущего дня\r\n    myDate.setMonth(myDate.getMonth() + 1, 0); // февраль текущего года\r\n    myDate.setDate(1); // 1 число февраля текущего года\r\n    return myDate;\r\n}\r\n\r\nexport const formatDate = (timestamp = new Date) => {\r\n    let d = timestamp.split(/[^\\d]+/);\r\n    d = d[2] + \"-\" + d[1] + \"-\" + d[0] + \" \" + d[3] + \":\" + d[4] + \":\" + d[5];\r\n    return d;\r\n}\r\n\r\nexport const notifyMe = (text) => {\r\n    if (!window.Notification) {\r\n        console.log('Browser does not support notifications.');\r\n    } else if (text) {\r\n        // check if permission is already granted\r\n        if (Notification.permission === 'granted') {\r\n            // show notification here\r\n            let notify = new Notification('Согласование договоров', {\r\n                title: 'Тест',\r\n                body: text,\r\n                icon: notif_image,\r\n                requireInteraction: false\r\n            });\r\n        } else {\r\n            // request permission from user\r\n            Notification.requestPermission().then(function (p) {\r\n                if (p === 'granted') {\r\n                    // show notification here\r\n                    let notify = new Notification('Согласование договоров', {\r\n                        title: 'Тест',\r\n                        body: text,\r\n                        icon: notif_image,\r\n                        requireInteraction: false\r\n                    });\r\n                } else {\r\n                    console.log('User blocked notifications.');\r\n                }\r\n            }).catch(function (err) {\r\n                console.error(err);\r\n            });\r\n        }\r\n    }\r\n}","const  constants = {\r\n    debug: false,\r\n    port: 8445,\r\n    host: window.SERVER_DATA,\r\n    graphql: {\r\n        path: '/graphql'\r\n    },\r\n}\r\n\r\nexport default constants;","import {\r\n    CrownOutlined,\r\n    LogoutOutlined,\r\n    ArrowLeftOutlined, \r\n    UserOutlined, \r\n    ReadOutlined,\r\n    BellFilled\r\n} from '@ant-design/icons';\r\nimport 'antd/dist/antd.css';\r\n// import '../index.css';\r\nimport { Grid, Dropdown, Menu, Col, Layout, Row, Space, PageHeader, Avatar, Popover, Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n// import notification from \"./img/notification.png\"\r\n\r\nconst { Header } = Layout;\r\nconst { useBreakpoint } = Grid;\r\n\r\nlet Header1 = React.memo(({ title, user, ...props }) => {\r\n    const screens = useBreakpoint();\r\n    let history = useHistory();\r\n\r\n    let { pathname } = useLocation();\r\n    const text = <span>Title</span>;\r\n    const content = (\r\n        <div>\r\n            <p>Content</p>\r\n            <p>Content</p>\r\n        </div>\r\n    );\r\n    return <div>\r\n        <Header className=\"site-layout-sub-header-background\" style={{ padding: 0, backgroundColor:'#406a95' }}>\r\n            <Row justify=\"space-between\" align=\"middle\" style={{ paddingLeft: 46 }}>\r\n                <Col flex=\"auto\" style={{ color: \"c40c46\" }}>\r\n                    <PageHeader\r\n                        className=\"site-page-header\"\r\n                        // onBack={() => null}\r\n                        backIcon={<ArrowLeftOutlined style={{ color: \"white\" }} />}\r\n                        onBack={pathname === '/' ? null : () => { history.push('/') }}\r\n                        title={<div style={{ color: \"white\" }}>LifeLine</div>}\r\n\r\n                    // subTitle=\"This is a subtitle\"\r\n                    />\r\n                </Col>\r\n                {screens.sm ? <Col flex=\"auto\">\r\n                    <h1 style={{ color: 'white' }}>{title}</h1>\r\n                </Col> : <></>}\r\n\r\n                <Col>\r\n                    <Popover placement=\"bottomRight\" title={text} content={content} trigger=\"click\">\r\n                        <span className='notificationDot'></span>\r\n                        <BellFilled className='notification' />\r\n                        {/* <Avatar shape=\"square\" size=\"small\" icon={<BellOutlined className='notification'/>} /> */}\r\n                    </Popover>\r\n                </Col>\r\n                <Col><Avatar shape=\"square\" size=\"small\" icon={<UserOutlined />} /></Col>\r\n\r\n                <Col flex=\"70px\" style={{ marginRight: \"30px\" }}>\r\n                    <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r\n\r\n                        {/*<Button type=\"primary\"><a href=\"/logout\">Выйти</a></Button>*/}\r\n                        <Dropdown overlay={<Menu>\r\n                            {user.admin &&\r\n                                <Menu.Item danger onClick={() => { history.push('/admin/') }} style={{ textAlign: 'center' }}>\r\n                                    <CrownOutlined />ADMIN\r\n                                </Menu.Item>}\r\n\r\n                            {user.admin && <Menu.Item danger onClick={() => {\r\n\r\n                                let a = document.createElement('a');\r\n                                a.target = '_blank';\r\n                                a.title = 'IUPC-WEB';\r\n                                a.href = '/help/admin';\r\n                                a.click();\r\n                            }} style={{ textAlign: 'center' }}><ReadOutlined />Справка</Menu.Item>}\r\n\r\n                            {user.technicalDepartment && !user.admin && <Menu.Item danger onClick={() => {\r\n\r\n                                let a = document.createElement('a');\r\n                                a.target = '_blank';\r\n                                a.title = 'ZIK-СКУД';\r\n                                a.href = '/help/hr';\r\n                                a.click();\r\n                            }} style={{ textAlign: 'center' }}><ReadOutlined />Справка</Menu.Item>}\r\n\r\n                            <Menu.Item danger onClick={() => { window.location.href = '/account/' }} style={{ textAlign: 'center' }}><UserOutlined />Аккаунт</Menu.Item>\r\n                            <Menu.Item danger onClick={() => { window.location.href = '/logout/' }} style={{ textAlign: 'center' }}><LogoutOutlined />Выйти</Menu.Item>\r\n                        </Menu>} placement=\"bottomCenter\" trigger={['click']}>\r\n                            <a className=\"ant-dropdown-link userName\" onClick={e => e.preventDefault()} style={{ fontSize: 21 }}>\r\n                                {user.username}\r\n                            </a>\r\n                        </Dropdown>\r\n                    </Space>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Header>\r\n    </div>\r\n});\r\n\r\nexport default Header1;","import { Form, Input, Button, Row, Col,Space } from 'antd';\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\r\nimport 'antd/dist/antd.less';\r\nimport React, {useEffect, useState} from 'react'\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport {handlerMutation} from \"../core/functions\";\r\nimport constants from \"../config/constants\";\r\nimport Layout from 'antd/lib/layout/layout';\r\nimport \"./style.css\";\r\n\r\nconst loginGQL = gql`\r\n    mutation login($user: JSON) {\r\n        login(user: $user){\r\n            username\r\n        }\r\n    }`;\r\nconst Login = () => {\r\n    let [user, setUser] = useState();\r\n    const [login, { loading, data }] = handlerMutation(useMutation(loginGQL))();\r\n    useEffect(() => {\r\n        if (user) {\r\n            login({ variables: { user }})\r\n        }\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),\r\n                body: JSON.stringify(user)\r\n            };\r\n            fetch('https://'+constants.host+':'+constants.port+'/login', requestOptions)\r\n                .then((response) => {\r\n                    if (response.url != window.location.href) {\r\n                        window.location.href = response.url\r\n                    } else {\r\n                        console.log(response);\r\n                    }\r\n                });\r\n        }\r\n    }, [data]);\r\n    const onFinish = (values) => {\r\n\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Row justify=\"center\" align=\"middle\" style={{ height: \"95vh\"}}>\r\n            <Col >\r\n                <Form\r\n                    form={form}\r\n                    name=\"basic\"\r\n                    onFinish={setUser}\r\n                    onFinishFailed={onFinishFailed}\r\n                >\r\n                <Row gutter={16}>\r\n                    <Col>\r\n                    <div className='authorizationHeader'>АВТОРИЗАЦИЯ</div>\r\n                    <Form.Item\r\n                        name=\"username\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Необходимо для заполнения!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input className='loginFormName' placeholder=\"Имя пользователя\"/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Необходимо для заполнения!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input.Password className='loginFormPassword' placeholder=\"Пароль\" iconRender={visible => (visible ? <EyeTwoTone style={{color:'#fff'}} className=\"loginIcons\"/> : <EyeInvisibleOutlined style={{color:'#fff'}} className=\"loginIcons\"/>)} />\r\n                    </Form.Item>\r\n                    <Form.Item className='loginFormItem'>\r\n                        <Button htmlType=\"submit\" loading={loading} className='login_btn'>\r\n                            Войти\r\n                        </Button>\r\n                    </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n\t\t\r\n    );\r\n};\r\n\r\n\r\nexport default Login;\r\n","import { Table, Tag, Space } from 'antd';\n\nconst columns = [\n  {\n    title: 'Предмет',\n    dataIndex: 'subject',\n    key: 'Предмет',\n    render: text => <a>{text}</a>,\n  },\n  {\n    title: 'mark',\n    dataIndex: 'mark',\n    key: 'Оценка',\n  }\n];\n\nconst data = [\n  {\n    key: '1',\n    subject: 'Казахский яызк',\n    mark: '5'\n },\n  {\n    key: '2',\n    subject: 'Русский язык',\n    mark: '5'\n  },\n  {\n    key: '3',\n    subject: 'Математика',\n    mark: '4'\n  },\n  {\n    key: '4',\n    subject: 'Физика',\n    mark: '4'\n  },\n  {\n    key: '5',\n    subject: 'Биология',\n    mark: '4'\n  },\n  {\n    key: '6',\n    subject: 'География',\n    mark: '5'\n  },\n];\n\nlet MarkTable = (props) => {\n    return (\n        <Table pagination={false} columns={columns} dataSource={data}/>\n    )\n}\n\nexport default MarkTable","import {\r\n    DeleteOutlined,\r\n    QuestionCircleOutlined,\r\n} from '@ant-design/icons';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { Button, Col, Form, Input, Popconfirm, Row, Card, Tree, Divider, Checkbox, Tag, Transfer, Empty, Avatar } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { handlerMutation, handlerQuery, useUser } from '../../../core/functions';\r\nimport ModalInsert from '../../../core/modal/ModalInsert';\r\nimport ModalUpdate from '../../../core/modal/ModalUpdate';\r\nimport TitleMenu from '../../../core/TitleMenu';\r\nimport TableContainer from \"../../../core/TableContainer\";\r\nimport test from \"../../../core/functions/test\";\r\nimport { AntDesignOutlined } from '@ant-design/icons';\r\nimport MarkTable from './MarkTable';\r\nconst modalFormWidth = 650;\r\n\r\nconst { Meta } = Card\r\n\r\nlet UsersPage = () => {\r\n\r\n    return (\r\n        <Row>\r\n            <Col flex={1}>\r\n                <Card\r\n                    hoverable\r\n                    style={{ width: 240 }}\r\n                    cover={<img alt=\"example\" src=\"https://media.istockphoto.com/vectors/avatar-5-vector-id1131164548?k=20&m=1131164548&s=612x612&w=0&h=ODVFrdVqpWMNA1_uAHX_WJu2Xj3HLikEnbof6M_lccA=\" />}\r\n                >\r\n                    <Meta title=\"Иванов Иван Иванович\" description=\"Школа номер 1, 12 класс\" />\r\n                </Card>\r\n            </Col>\r\n            <Col flex={4}>\r\n                <Row gutter={[10, 80]}>\r\n                    <Col span={12}>\r\n                    Оценки аттестата\r\n                        <MarkTable />\r\n                    </Col>\r\n                    <Col span={12}>\r\n                    Оценки ЕНТ\r\n                        <MarkTable/>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default UsersPage;","import { DeleteOutlined, QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { Button, Form, Input, Popconfirm } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { handlerQuery, handlerMutation, useUser } from '../../../core/functions';\r\nimport ModalInsert from '../../../core/modal/ModalInsert';\r\nimport ModalUpdate from '../../../core/modal/ModalUpdate';\r\nimport TableContainer from '../../../core/TableContainer';\r\nimport TitleMenu from '../../../core/TitleMenu';\r\nimport test from \"../../../core/functions/test\";\r\n\r\nlet document_statuses = {\r\n    exemplar: 'document_statuses',\r\n    table: 'document_statuses',\r\n    options: {\r\n        all: {\r\n\t\t\t /*variables: {\r\n                controller_addresses: { global: {ORDER_BY: ['id DESC']}}\r\n            },*/\r\n            fetchPolicy: 'cache-only'\r\n        },\r\n        one: {\r\n            fetchPolicy: 'standby'\r\n        }\r\n    },\r\n    select: {\r\n        all: gql`\r\n            query document_statuses ($document_statuses: JSON) {\r\n                document_statuses (document_statuses: $document_statuses) {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        `,\r\n        one: gql`\r\n            query document_statuses($document_statuses: JSON) {\r\n                document_statuses(document_statuses: $document_statuses) {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        `\r\n    },\r\n    subscription: {\r\n        all: gql`\r\n            subscription document_statuses ($document_statuses: JSON){\r\n                document_statuses (document_statuses: $document_statuses) {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        `\r\n    },\r\n    insert: gql`\r\n        mutation insertDocumentStatus($document_statuses: JSON) {\r\n            insertDocumentStatus(document_statuses: $document_statuses){\r\n                message\r\n            }\r\n        }\r\n    `,\r\n    update: gql`\r\n        mutation updateDocumentStatus($document_statuses: JSON) {\r\n            updateDocumentStatus(document_statuses: $document_statuses){\r\n                message\r\n            }\r\n        }\r\n    `,\r\n\tdelete: gql`\r\n        mutation deleteDocumentStatus($document_statuses: JSON) {\r\n            deleteDocumentStatus(document_statuses: $document_statuses){\r\n                message\r\n            }\r\n        }\r\n    `\r\n}\r\n\r\n\r\nlet DocumentStatusesPage = React.memo((props) => {\r\n\tlet user = useUser();\r\n    const visibleModalUpdate = useState(false);\r\n\t\r\n    const [remove, { loading: loadingRemove }] = handlerMutation(useMutation(document_statuses.delete))();\r\n\r\n    const { loading, data, refetch } = handlerQuery(document_statuses, 'all')();\r\n    useEffect(() => { refetch() }, []);\r\n    let list = (data && data[Object.keys(data)[0]] != null) ? data[Object.keys(data)[0]].map((item) => {\r\n        return {\r\n            id: item.id,\r\n            key: item.id,\r\n            name: item.name\r\n        }\r\n    }) : [];\r\n    let dict = test([\r\n        { title: 'ID', dataIndex: 'id', width: '114px', type:'search', tooltip: true },\r\n        { title: 'Название', dataIndex: 'name', width: '95px', type:'search', tooltip: true }\r\n    ]);\r\n    let titleMenu = (tableProps) => {\r\n        return (<TitleMenu\r\n            title='Редактирование статусов документов'\r\n            buttons={[\r\n                <ModalInsert title='Добавление статуса' GQL={document_statuses} InsertForm={DocumentStatusesForm} />,\r\n                <ModalUpdate visibleModalUpdate={visibleModalUpdate} title='Редактирование статуса' selectedRowKeys={tableProps.selectedRowKeys} GQL={document_statuses} UpdateForm={DocumentStatusesForm} update={true} />,\r\n\t\t\t\t<Popconfirm\r\n                    title=\"Вы уверены?\"\r\n                    onConfirm={() => { let variables = {}; variables[document_statuses.exemplar] = { id: Number(tableProps.selectedRowKeys[0]), log_username: user.username }; remove({ variables }) }}\r\n                    okText=\"Да\"\r\n                    cancelText=\"Нет\"\r\n                    icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\r\n                    disabled={tableProps.selectedRowKeys.length !== 1}\r\n                >\r\n                    <Button key=\"remove\" type=\"dashed\" danger loading={loadingRemove} disabled={tableProps.selectedRowKeys.length !== 1}><DeleteOutlined />Удалить</Button>\r\n                </Popconfirm>\r\n            ]}\r\n            selectedRowKeys={tableProps.selectedRowKeys}\r\n        />)\r\n    };\r\n\r\n    return (\r\n        <TableContainer\r\n            data={{ dict, records: list }}\r\n            loading={loading}\r\n            title={titleMenu}\r\n            visibleModalUpdate={visibleModalUpdate}\r\n        />\r\n    )\r\n});\r\n\r\nlet DocumentStatusesForm = React.memo((props) => {\r\n\tlet user = useUser();\r\n  const [state, setState] = useState({\r\n\t\tisuseforreport:false,\r\n\t\tlog_username:user.username\r\n    });\r\n\r\n    useEffect(() => { props.form.setFieldsValue(state) }, [state]);\r\n\r\n    useEffect(() => {\r\n        if (props.initialValues) {\r\n            setState({\r\n                id: props.initialValues.document_statuses[0].id,\r\n                name: props.initialValues.document_statuses[0].name,\r\n\t\t\t    log_username:state.log_username\r\n\t\t\t});\r\n\t\t}\r\n    }, [props.initialValues]);\r\n\t\r\n\tlet onFinish = (values) => {\r\n        props.onFinish(state)\r\n    }\r\n    return (\r\n        <Form\r\n            form={props.form}\r\n            name=\"DocumentStatusesForm\"\r\n            onFinish={onFinish}\r\n            scrollToFirstError\r\n            autoComplete=\"off\"\r\n\r\n            onValuesChange={(changedValues, allValues) => { setState(Object.assign({}, state, { ...allValues, })) }}\r\n            \r\n        >\r\n            <Form.Item\r\n                name=\"name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Необходимо для заполнения!',\r\n                        whitespace: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input disabled={props.disabled} placeholder=\"Название статуса документа\" />\r\n            </Form.Item>\r\n\t\t\t<Form.Item\r\n                name=\"log_username\"\r\n\t\t\t\thidden={true}\r\n            >\r\n                <Input disabled={props.disabled}/>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n});\r\n\r\nexport default DocumentStatusesPage;","import {\r\n    TeamOutlined\r\n} from '@ant-design/icons';\r\nimport { Divider, Layout, Menu } from 'antd';\r\nimport React from 'react';\r\nimport { NavLink, Redirect, Route, useLocation, withRouter } from 'react-router-dom';\r\nimport UsersPage from './pages/UsersPage';\r\nimport DocumentStatusesPage from './pages/DocumentStatusesPage';\r\nimport DocumentRoutesPage from './pages/DocumentRoutesPage';\r\nimport DocumentPositionsPage from './pages/PositionsPage';\r\nimport { accessRedirect, useUser } from \"../../core/functions\";\r\nimport Header1 from \"../../core/Header1\";\r\n\r\n\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n//const [\r\n//    ttt,\r\n//    { loading: mutationLoading, error: mutationError, data },\r\n//] = useMutation(GET_GREETING);\r\n//useEffect(() => {\r\n//    ttt();\r\n//}, []);\r\n//console.log(mutationLoading);\r\n//console.log(mutationError);\r\n//console.log(data);\r\n\r\nlet AdminPanel = (props) => {\r\n    let { pathname } = useLocation();\r\n    let user = useUser();\r\n\r\n    let path = props.location.pathname.split('/').slice(1);\r\n    if (pathname === '/admin/' || pathname === '/admin') {\r\n        if (user.username) {\r\n            return <Redirect to='/admin/registration' />;\r\n        }\r\n        if (user.username) {\r\n            return <Redirect to='/admin/positions-page' />;\r\n        }\r\n        if (user.username) {\r\n            return <Redirect to='/admin/document-statuses-page' />;\r\n        }\r\n        if (user.username) {\r\n            return <Redirect to='/admin/document-routes-page' />;\r\n        }\r\n    }\r\n    console.log(path, pathname);\r\n\r\n    return (\r\n        <Layout className=\"main-layout\">\r\n            <Header1 title={'Карточка обучающегося'} user={user} />\r\n            <Layout>\r\n\r\n                <Layout className=\"content-layout\">\r\n                    <Content\r\n                        style={{\r\n                            padding: 24,\r\n                            margin: 0,\r\n                            // minHeight: 280\r\n                        }}>\r\n                        <div className=\"site-layout-background\" style={{ minHeight: 360 }}>\r\n                            <Route path=\"/admin/registration\" component={UsersPage} />\r\n                            {/* <Route path=\"/admin/positions-page\" component={DocumentPositionsPage} />\r\n                            <Route path=\"/admin/document-statuses-page\" component={DocumentStatusesPage} />\r\n                            <Route path=\"/admin/document-routes-page\" component={DocumentRoutesPage} /> */}\r\n                        </div>\r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default withRouter(AdminPanel);","import { DeleteOutlined, QuestionCircleOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { Button, Form, Input, Popconfirm, Transfer, Empty, Space, Checkbox, Row, Col } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { handlerQuery, handlerMutation, useUser } from '../../../core/functions';\r\nimport ModalInsert from '../../../core/modal/ModalInsert';\r\nimport ModalUpdate from '../../../core/modal/ModalUpdate';\r\nimport IndependentSelect from '../../../core/IndependentSelect';\r\nimport TableContainer from '../../../core/TableContainer';\r\nimport TitleMenu from '../../../core/TitleMenu';\r\nimport test from \"../../../core/functions/test\";\r\n\r\n\r\nlet routesDemo = [\r\n    {\r\n        userId: 1,\r\n        isExecutor: true, //if this position or user is original creator of agreement ticket\r\n        isLastStep: false,\r\n        description: \"Описание\",\r\n        accesses:[1,2,3,4,5],\r\n        substitutes: [2, 3, 4] //id of users who can replace this person\r\n    },\r\n    {\r\n        userId: 2,\r\n        isExecutor: true,\r\n        isLastStep: false,\r\n        description: \"Описание\",\r\n        accesses: [1, 2, 3, 4, 5],\r\n        substitutes: [2, 3, 4]\r\n    },\r\n    {\r\n        userId: 3,\r\n        isExecutor: true,\r\n        isLastStep: true,\r\n        description: \"Описание\",\r\n        accesses: [1, 2, 3, 4, 5],\r\n        substitutes: [2, 3, 4] \r\n    }\r\n]\r\n\r\nlet document_routes = {\r\n    exemplar: 'document_routes',\r\n    table: 'document_routes',\r\n    options: {\r\n        all: {\r\n            /*variables: {\r\n               controller_addresses: { global: {ORDER_BY: ['id DESC']}}\r\n           },*/\r\n            fetchPolicy: 'cache-only'\r\n        },\r\n        one: {\r\n            fetchPolicy: 'standby'\r\n        }\r\n    },\r\n    select: {\r\n        all: gql`\r\n            query document_routes ($document_routes: JSON) {\r\n                document_routes (document_routes: $document_routes) {\r\n                    id\r\n                    name\r\n                    status_in_process\r\n                    status_cancelled\r\n                    status_finished\r\n                    routes\r\n                }\r\n            }\r\n        `,\r\n        one: gql`\r\n            query document_routes($document_routes: JSON) {\r\n                document_routes(document_routes: $document_routes) {\r\n                    id\r\n                    name\r\n                    status_in_process\r\n                    status_cancelled\r\n                    status_finished\r\n                    routes\r\n                }\r\n            }\r\n        `\r\n    },\r\n    subscription: {\r\n        all: gql`\r\n            subscription document_routes ($document_routes: JSON){\r\n                document_routes (document_routes: $document_routes) {\r\n                    id\r\n                    name\r\n                    status_in_process\r\n                    status_cancelled\r\n                    status_finished\r\n                    routes\r\n                }\r\n            }\r\n        `\r\n    },\r\n    insert: gql`\r\n        mutation insertDocumentRoute($document_routes: JSON) {\r\n            insertDocumentRoute(document_routes: $document_routes){\r\n                message\r\n            }\r\n        }\r\n    `,\r\n    update: gql`\r\n        mutation updateDocumentRoute($document_routes: JSON) {\r\n            updateDocumentRoute(document_routes: $document_routes){\r\n                message\r\n            }\r\n        }\r\n    `,\r\n    delete: gql`\r\n        mutation deleteDocumentRoute($document_routes: JSON) {\r\n            deleteDocumentRoute(document_routes: $document_routes){\r\n                message\r\n            }\r\n        }\r\n    `\r\n};\r\n\r\nlet document_statuses = {\r\n    exemplar: 'document_statuses',\r\n    table: 'document_statuses',\r\n    options: {\r\n        all: {\r\n            fetchPolicy: 'cache-only'\r\n        }\r\n    },\r\n    select: {\r\n        all: gql`\r\n            query document_statuses ($document_statuses: JSON) {\r\n                document_statuses (document_statuses: $document_statuses) {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        `\r\n    },\r\n    subscription: {\r\n        all: gql`\r\n            subscription document_statuses ($document_statuses: JSON){\r\n                document_statuses (document_statuses: $document_statuses) {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        `\r\n    }\r\n};\r\n\r\nlet userNames = {\r\n    select: {\r\n        all: gql`\r\n            query users {\r\n                users {\r\n                    id\r\n                    username\r\n                }\r\n            }\r\n        `\r\n    },\r\n    subscription: {\r\n        all: gql`\r\n            subscription users {\r\n                users {\r\n                    id\r\n                    username\r\n                }\r\n            }\r\n        `,\r\n    },\r\n}\r\n\r\nlet positions = {\r\n    exemplar: 'positions',\r\n    table: 'positions',\r\n    options: {\r\n        all: {\r\n            /*variables: {\r\n               controller_addresses: { global: {ORDER_BY: ['id DESC']}}\r\n           },*/\r\n            fetchPolicy: 'cache-only'\r\n        },\r\n        one: {\r\n            fetchPolicy: 'standby'\r\n        }\r\n    },\r\n    select: {\r\n        all: gql`\r\n            query positions ($positions: JSON) {\r\n                positions (positions: $positions) {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        `,\r\n        one: gql`\r\n            query positions($positions: JSON) {\r\n                positions(positions: $positions) {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        `\r\n    },\r\n    subscription: {\r\n        all: gql`\r\n            subscription positions ($positions: JSON){\r\n                positions (positions: $positions) {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        `\r\n    }\r\n}\r\n\r\nlet DocumentRoutesPage = React.memo((props) => {\r\n\tlet user = useUser();\r\n    const visibleModalUpdate = useState(false);\r\n\t\r\n    const [remove, { loading: loadingRemove }] = handlerMutation(useMutation(document_routes.delete))();\r\n\r\n    const { loading, data, refetch } = handlerQuery(document_routes, 'all')();\r\n    useEffect(() => { refetch() }, []);\r\n    let list = (data && data[Object.keys(data)[0]] != null) ? data[Object.keys(data)[0]].map((item) => {\r\n        return {\r\n            id: item.id,\r\n            key: item.id,\r\n            name: item.name\r\n        }\r\n    }) : [];\r\n    let dict = test([\r\n        { title: 'ID', dataIndex: 'id', width: '114px', type:'search', tooltip: true },\r\n        { title: 'Название', dataIndex: 'name', width: '95px', type:'search', tooltip: true }\r\n    ]);\r\n    let titleMenu = (tableProps) => {\r\n        return (<TitleMenu\r\n            title='Редактирование маршрутов документа'\r\n            buttons={[\r\n                <ModalInsert title='Добавление маршрута' GQL={document_routes} InsertForm={DocumentRoutesForm} width={750} />,\r\n                <ModalUpdate visibleModalUpdate={visibleModalUpdate} title='Редактирование маршрута' selectedRowKeys={tableProps.selectedRowKeys}\r\n                    GQL={document_routes} UpdateForm={DocumentRoutesForm} update={true} width={750} />,\r\n\t\t\t\t<Popconfirm\r\n                    title=\"Вы уверены?\"\r\n                    onConfirm={() => { let variables = {}; variables[document_routes.exemplar] = { id: Number(tableProps.selectedRowKeys[0]), log_username: user.username }; remove({ variables }) }}\r\n                    okText=\"Да\"\r\n                    cancelText=\"Нет\"\r\n                    icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\r\n                    disabled={tableProps.selectedRowKeys.length !== 1}\r\n                >\r\n                    <Button key=\"remove\" type=\"dashed\" danger loading={loadingRemove} disabled={tableProps.selectedRowKeys.length !== 1}><DeleteOutlined />Удалить</Button>\r\n                </Popconfirm>\r\n            ]}\r\n            selectedRowKeys={tableProps.selectedRowKeys}\r\n        />)\r\n    };\r\n\r\n    return (\r\n        <TableContainer\r\n            data={{ dict, records: list }}\r\n            loading={loading}\r\n            title={titleMenu}\r\n            visibleModalUpdate={visibleModalUpdate}\r\n        />\r\n    )\r\n});\r\n\r\nlet DocumentRoutesForm = React.memo((props) => {\r\n\tlet user = useUser();\r\n  const [state, setState] = useState({\r\n\t\tisuseforreport:false,\r\n\t\tlog_username:user.username\r\n    });\r\n\r\n    useEffect(() => { props.form.setFieldsValue(state) }, [state]);\r\n\r\n    useEffect(() => {\r\n        if (props.initialValues) {\r\n            setState({\r\n                id: props.initialValues.document_routes[0].id,\r\n                name: props.initialValues.document_routes[0].name,\r\n                status_in_process: props.initialValues.document_routes[0].status_in_process,\r\n                status_cancelled: props.initialValues.document_routes[0].status_cancelled,\r\n                status_finished: props.initialValues.document_routes[0].status_finished,\r\n                routes: props.initialValues.document_routes[0].routes,\r\n\t\t\t    log_username:state.log_username\r\n            });\r\n            console.log('props.initialValues routes',props.initialValues)\r\n\t\t}\r\n    }, [props.initialValues]);\r\n\t\r\n\tlet onFinish = (values) => {\r\n        props.onFinish(state)\r\n        console.log('-------------------------------------------', values);\r\n    }\r\n    return (\r\n        <Form\r\n            form={props.form}\r\n            name=\"DocumentRoutesForm\"\r\n            onFinish={onFinish}\r\n            scrollToFirstError\r\n            autoComplete=\"off\"\r\n\r\n            onValuesChange={(changedValues, allValues) => { setState(Object.assign({}, state, { ...allValues, })) }}\r\n\r\n        >\r\n            <Form.Item\r\n                name=\"name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Необходимо для заполнения!',\r\n                        whitespace: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input disabled={props.disabled} placeholder=\"Название маршрута документа\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"status_in_process\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Необходимо для заполнения!',\r\n                        whitespace: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <IndependentSelect disabled={props.disabled} placeholder=\"Статус в процессе\" title=\"Статус в процессе\" query={document_statuses} />\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"status_cancelled\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Необходимо для заполнения!',\r\n                        whitespace: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <IndependentSelect disabled={props.disabled} placeholder=\"Статус - отклонён\" title=\"Статус - отклонён\" query={document_statuses} />\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"status_finished\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Необходимо для заполнения!',\r\n                        whitespace: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <IndependentSelect disabled={props.disabled} placeholder=\"Статус - завершён\" title=\"Статус - завершён\" query={document_statuses} />\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"log_username\"\r\n                hidden={true}\r\n            >\r\n                <Input disabled={props.disabled} />\r\n            </Form.Item>\r\n\r\n\r\n            <Form.List name=\"routes\">\r\n                {(fields, { add, remove }) => (\r\n                    <>\r\n                        {fields.map((field) => (\r\n                            <Space\r\n                                key={field.key}\r\n                                style={{ display: \"flex\", marginBottom: 40 }}\r\n                                align=\"baseline\"\r\n                            >\r\n                                <Row gutter={20}>\r\n                                    <Col span={24}>\r\n                                        Участник №: <b>{field.key + 1}</b>\r\n                                    </Col>\r\n                                    <Col span={12}>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, \"positionId\"]}\r\n                                            fieldKey={[field.fieldKey, \"positionId\"]}\r\n                                        >\r\n                                            <IndependentSelect disabled={props.disabled} placeholder=\"Должность\" title=\"Должность\" query={positions} />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col span={12}>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, \"isExecutor\"]}\r\n                                            fieldKey={[field.fieldKey, \"isExecutor\"]}\r\n                                            valuePropName=\"checked\"\r\n                                            rules={[\r\n                                                {\r\n                                                    type: 'boolean',\r\n                                                    required: false,\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <Checkbox disabled={props.disabled}>Исполнитель?</Checkbox>\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col span={24}>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            label=\"Выбранные статусы:\"\r\n                                            name={[field.name, \"statuses\"]}\r\n                                            fieldKey={[field.fieldKey, \"statuses\"]}\r\n                                            rules={[\r\n                                                {\r\n                                                    type: 'array',\r\n                                                    required: false,\r\n                                                    message: 'Необходимо выбрать хотябы одну!'\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <DocumentStatusesTransfer disabled={props.disabled} />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col span={24}>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            label=\"Заменяющие лица:\"\r\n                                            name={[field.name, \"substitutes\"]}\r\n                                            fieldKey={[field.fieldKey, \"substitutes\"]}\r\n                                            rules={[\r\n                                                {\r\n                                                    type: 'array',\r\n                                                    required: false,\r\n                                                    message: 'Необходимо выбрать хотябы одну!'\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <SubstitutesTransfer disabled={props.disabled} />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col span={24}>\r\n                                        <i>Убрать</i>\r\n                                        <MinusCircleOutlined onClick={() => remove(field.name)} disabled={props.disabled} style={{ marginLeft:5 }}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Space>\r\n                        ))}\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"dashed\"\r\n                                onClick={() => add()}\r\n                                disabled={props.disabled}\r\n                                block\r\n                                icon={<PlusOutlined />}\r\n                            >\r\n                                Добавить участника\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </>\r\n                )}\r\n            </Form.List>\r\n\r\n\r\n\r\n        </Form>\r\n    )\r\n});\r\n\r\nlet DocumentStatusesTransfer = React.memo((props) => {\r\n\r\n    const modalFormWidth = 650;\r\n\r\n    const { loading, data, refetch } = handlerQuery(document_statuses, 'all')();\r\n    useEffect(() => { refetch() }, []);\r\n\r\n    const [selectedKeys, setSelectedKeys] = useState([]);\r\n    let handleChange = (nextTargetKeys, direction, moveKeys) => {\r\n        props.onChange(nextTargetKeys);\r\n    };\r\n\r\n    let handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\r\n        setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\r\n        console.log(selectedKeys);\r\n    };\r\n\r\n    let filterOption = (inputValue, option) => option.description.indexOf(inputValue) > -1;\r\n\r\n    let mockData = []\r\n    if (!loading) {\r\n        mockData = data.document_statuses.map((item) => {\r\n            return {\r\n                id: item.id,\r\n                key: item.id,\r\n                title: item.name,\r\n                description: item.name\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Transfer\r\n                dataSource={mockData}\r\n                titles={['Все', 'Выбранные']}\r\n                targetKeys={props.value ? props.value : []}\r\n                selectedKeys={selectedKeys}\r\n                onChange={handleChange}\r\n                showSelectAll={false}\r\n                onSelectChange={handleSelectChange}\r\n                render={item => item.title}\r\n                listStyle={{ width: modalFormWidth / 2.2 }}\r\n                style={{ marginBottom: 16 }}\r\n\r\n                filterOption={filterOption}\r\n\r\n                locale={{\r\n                    itemUnit: \"\",\r\n                    itemsUnit: \"\",\r\n                    notFoundContent: <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description=\"Нет данных\" />,\r\n                    searchPlaceholder: \"Статус\"\r\n                }}\r\n                disabled={props.disabled}\r\n            />\r\n        </>\r\n    );\r\n});\r\n\r\nlet SubstitutesTransfer = React.memo((props) => {\r\n\r\n    const modalFormWidth = 650;\r\n\r\n    const { loading, data, refetch } = handlerQuery(userNames, 'all')();\r\n    useEffect(() => { refetch() }, []);\r\n\r\n    const [selectedKeys, setSelectedKeys] = useState([]);\r\n    let handleChange = (nextTargetKeys, direction, moveKeys) => {\r\n        props.onChange(nextTargetKeys);\r\n    };\r\n\r\n    let handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\r\n        setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\r\n        console.log(selectedKeys);\r\n    };\r\n\r\n    let filterOption = (inputValue, option) => option.description.indexOf(inputValue) > -1;\r\n\r\n    let mockData = []\r\n    if (!loading) {\r\n        mockData = data.users.map((item) => {\r\n            return {\r\n                id: item.id,\r\n                key: item.id,\r\n                title: item.username,\r\n                description: item.username\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Transfer\r\n                dataSource={mockData}\r\n                titles={['Все', 'Выбранные']}\r\n                targetKeys={props.value ? props.value : []}\r\n                selectedKeys={selectedKeys}\r\n                onChange={handleChange}\r\n                showSelectAll={false}\r\n                onSelectChange={handleSelectChange}\r\n                render={item => item.title}\r\n                listStyle={{ width: modalFormWidth / 2.2 }}\r\n                style={{ marginBottom: 16 }}\r\n\r\n                filterOption={filterOption}\r\n\r\n                locale={{\r\n                    itemUnit: \"\",\r\n                    itemsUnit: \"\",\r\n                    notFoundContent: <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description=\"Нет данных\" />,\r\n                    searchPlaceholder: \"Статус\"\r\n                }}\r\n                disabled={props.disabled}\r\n            />\r\n        </>\r\n    );\r\n});\r\n\r\n\r\nexport default DocumentRoutesPage;","import { DeleteOutlined, QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { Button, Form, Input, Popconfirm, Tree } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { handlerQuery, handlerMutation, useUser } from '../../../core/functions';\r\nimport ModalInsert from '../../../core/modal/ModalInsert';\r\nimport ModalUpdate from '../../../core/modal/ModalUpdate';\r\nimport TableContainer from '../../../core/TableContainer';\r\nimport TitleMenu from '../../../core/TitleMenu';\r\nimport test from \"../../../core/functions/test\";\r\n\r\nlet positions = {\r\n    exemplar: 'positions',\r\n    table: 'positions',\r\n    options: {\r\n        all: {\r\n\t\t\t /*variables: {\r\n                controller_addresses: { global: {ORDER_BY: ['id DESC']}}\r\n            },*/\r\n            fetchPolicy: 'cache-only'\r\n        },\r\n        one: {\r\n            fetchPolicy: 'standby'\r\n        }\r\n    },\r\n    select: {\r\n        all: gql`\r\n            query positions ($positions: JSON) {\r\n                positions (positions: $positions) {\r\n                    id\r\n                    name\r\n                    accesses\r\n                }\r\n            }\r\n        `,\r\n        one: gql`\r\n            query positions($positions: JSON) {\r\n                positions(positions: $positions) {\r\n                    id\r\n                    name\r\n                    accesses\r\n                }\r\n            }\r\n        `\r\n    },\r\n    subscription: {\r\n        all: gql`\r\n            subscription positions ($positions: JSON){\r\n                positions (positions: $positions) {\r\n                    id\r\n                    name\r\n                    accesses\r\n                }\r\n            }\r\n        `\r\n    },\r\n    insert: gql`\r\n        mutation insertPosition($positions: JSON) {\r\n            insertPosition(positions: $positions){\r\n                message\r\n            }\r\n        }\r\n    `,\r\n    update: gql`\r\n        mutation updatePosition($positions: JSON) {\r\n            updatePosition(positions: $positions){\r\n                message\r\n            }\r\n        }\r\n    `,\r\n\tdelete: gql`\r\n        mutation deletePosition($positions: JSON) {\r\n            deletePosition(positions: $positions){\r\n                message\r\n            }\r\n        }\r\n    `\r\n}\r\n\r\n\r\nlet DocumentPositionsPage = React.memo((props) => {\r\n\tlet user = useUser();\r\n    const visibleModalUpdate = useState(false);\r\n\t\r\n    const [remove, { loading: loadingRemove }] = handlerMutation(useMutation(positions.delete))();\r\n\r\n    const { loading, data, refetch } = handlerQuery(positions, 'all')();\r\n    useEffect(() => { refetch() }, []);\r\n    let list = (data && data[Object.keys(data)[0]] != null) ? data[Object.keys(data)[0]].map((item) => {\r\n        return {\r\n            id: item.id,\r\n            key: item.id,\r\n            name: item.name,\r\n            accesses: item.accesses,\r\n        }\r\n    }) : [];\r\n    let dict = test([\r\n        { title: 'ID', dataIndex: 'id', width: '114px', type:'search', tooltip: true },\r\n        { title: 'Название', dataIndex: 'name', width: '95px', type:'search', tooltip: true }\r\n    ]);\r\n    let titleMenu = (tableProps) => {\r\n        return (<TitleMenu\r\n            title='Редактирование должностей'\r\n            buttons={[\r\n                <ModalInsert title='Добавление должности' GQL={positions} InsertForm={DocumentPositionsForm} />,\r\n                <ModalUpdate visibleModalUpdate={visibleModalUpdate} title='Редактирование должности' selectedRowKeys={tableProps.selectedRowKeys} GQL={positions} UpdateForm={DocumentPositionsForm} update={true} />,\r\n\t\t\t\t<Popconfirm\r\n                    title=\"Вы уверены?\"\r\n                    onConfirm={() => { let variables = {}; variables[positions.exemplar] = { id: Number(tableProps.selectedRowKeys[0]), log_username: user.username }; remove({ variables }) }}\r\n                    okText=\"Да\"\r\n                    cancelText=\"Нет\"\r\n                    icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\r\n                    disabled={tableProps.selectedRowKeys.length !== 1}\r\n                >\r\n                    <Button key=\"remove\" type=\"dashed\" danger loading={loadingRemove} disabled={tableProps.selectedRowKeys.length !== 1}><DeleteOutlined />Удалить</Button>\r\n                </Popconfirm>\r\n            ]}\r\n            selectedRowKeys={tableProps.selectedRowKeys}\r\n        />)\r\n    };\r\n\r\n    return (\r\n        <TableContainer\r\n            data={{ dict, records: list }}\r\n            loading={loading}\r\n            title={titleMenu}\r\n            visibleModalUpdate={visibleModalUpdate}\r\n        />\r\n    )\r\n});\r\n\r\nlet DocumentPositionsForm = React.memo((props) => {\r\n\tlet user = useUser();\r\n  const [state, setState] = useState({\r\n\t\tlog_username:user.username\r\n    });\r\n\r\n    useEffect(() => { props.form.setFieldsValue(state) }, [state]);\r\n\r\n    useEffect(() => {\r\n        if (props.initialValues) {\r\n            setState({\r\n                id: props.initialValues.positions[0].id,\r\n                name: props.initialValues.positions[0].name,\r\n                accesses: props.initialValues.positions[0].accesses,\r\n\t\t\t    log_username:state.log_username\r\n\t\t\t});\r\n\t\t}\r\n    }, [props.initialValues]);\r\n\t\r\n\tlet onFinish = (values) => {\r\n        props.onFinish(state)\r\n    }\r\n    return (\r\n        <Form\r\n            form={props.form}\r\n            name=\"DocumentPositionsForm\"\r\n            onFinish={onFinish}\r\n            scrollToFirstError\r\n            autoComplete=\"off\"\r\n\r\n            onValuesChange={(changedValues, allValues) => { setState(Object.assign({}, state, { ...allValues, })) }}\r\n            \r\n        >\r\n            <Form.Item\r\n                name=\"name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Необходимо для заполнения!',\r\n                        whitespace: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input disabled={props.disabled} placeholder=\"Название должности\" />\r\n            </Form.Item>\r\n            <h3>Назначение доступа:</h3>\r\n            <Form.Item\r\n                name='accesses'\r\n                rules={[\r\n                    {\r\n                        type: 'array',\r\n                        required: true,\r\n                        message: 'Необходимо для заполнения!'\r\n                    },\r\n                ]}\r\n            >\r\n                <PositionsPermissionsTree disabled={props.disabled} />\r\n            </Form.Item>\r\n\t\t\t<Form.Item\r\n                name=\"log_username\"\r\n\t\t\t\thidden={true}\r\n            >\r\n                <Input disabled={props.disabled}/>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n});\r\n\r\nlet PositionsPermissionsTree = React.memo((props) => {\r\n\r\n    const [autoExpandParent, setAutoExpandParent] = useState(true);\r\n    const [expandedKeys, setExpandedKeys] = useState([]);\r\n\r\n    const treeData = [\r\n        {\r\n            title: \"Входящие\",\r\n            key: \"/document-control-p\",\r\n            children: [\r\n                {\r\n                    title: \"Просмотр\",\r\n                    key: \"/document-control-p/select\"\r\n                },\r\n                {\r\n                    title: \"Добавление\",\r\n                    key: \"/document-control-p/insert\"\r\n                },\r\n                {\r\n                    title: \"Изменение\",\r\n                    key: \"/document-control-p/update\"\r\n                },\r\n                {\r\n                    title: \"Удаление\",\r\n                    key: \"/document-control-p/delete\"\r\n                },\r\n                {\r\n                    title: \"Изменение статуса документа\",\r\n                    key: \"/document-control-p/document-status-change\"\r\n                },\r\n                {\r\n                    title: \"Изменение статуса элементов\",\r\n                    key: \"/document-control-p/item-status-change\"\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            title: \"Отчеты\",\r\n            key: \"/document-report-p\",\r\n            children: [\r\n                {\r\n                    title: \"Просмотр\",\r\n                    key: \"/document-report-p/select\"\r\n                },\r\n                {\r\n                    title: \"Добавление\",\r\n                    key: \"/document-report-p/insert\"\r\n                },\r\n                {\r\n                    title: \"Изменение\",\r\n                    key: \"/document-report-p/update\"\r\n                },\r\n                {\r\n                    title: \"Удаление\",\r\n                    key: \"/document-report-p/delete\"\r\n                },\r\n                {\r\n                    title: \"Изменение статуса документа\",\r\n                    key: \"/document-report-p/document-status-change\"\r\n                },\r\n                {\r\n                    title: \"Изменение статуса элементов\",\r\n                    key: \"/document-report-p/item-status-change\"\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            title: \"История\",\r\n            key: \"/document-hitory-p\",\r\n            children: [\r\n                {\r\n                    title: \"Просмотр\",\r\n                    key: \"/document-hitory-p/select\"\r\n                },\r\n                {\r\n                    title: \"Добавление\",\r\n                    key: \"/document-hitory-p/insert\"\r\n                },\r\n                {\r\n                    title: \"Изменение\",\r\n                    key: \"/document-hitory-p/update\"\r\n                },\r\n                {\r\n                    title: \"Удаление\",\r\n                    key: \"/document-hitory-p/delete\"\r\n                },\r\n                {\r\n                    title: \"Изменение статуса документа\",\r\n                    key: \"/document-hitory-p/document-status-change\"\r\n                },\r\n                {\r\n                    title: \"Изменение статуса элементов\",\r\n                    key: \"/document-hitory-p/item-status-change\"\r\n                },\r\n\r\n            ]\r\n        },\r\n        {\r\n            title: \"Поиск\",\r\n            key: \"/document-search-p\",\r\n            children: [\r\n                {\r\n                    title: \"Просмотр\",\r\n                    key: \"/document-search-p/select\"\r\n                },\r\n                {\r\n                    title: \"Добавление\",\r\n                    key: \"/document-search-p/insert\"\r\n                },\r\n                {\r\n                    title: \"Изменение\",\r\n                    key: \"/document-search-p/update\"\r\n                },\r\n                {\r\n                    title: \"Удаление\",\r\n                    key: \"/document-search-p/delete\"\r\n                },\r\n                {\r\n                    title: \"Изменение статуса документа\",\r\n                    key: \"/document-search-p/document-status-change\"\r\n                },\r\n                {\r\n                    title: \"Изменение статуса элементов\",\r\n                    key: \"/document-search-p/item-status-change\"\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            title: \"Администрация\",\r\n            key: \"/admin-p\",\r\n            children: [\r\n                {\r\n                    title: \"Просмотр\",\r\n                    key: \"/admin-p/select\"\r\n                },\r\n                {\r\n                    title: \"Добавление\",\r\n                    key: \"/admin-p/insert\"\r\n                },\r\n                {\r\n                    title: \"Изменение\",\r\n                    key: \"/admin-p/update\"\r\n                },\r\n                {\r\n                    title: \"Удаление\",\r\n                    key: \"/admin-p/delete\"\r\n                },\r\n                {\r\n                    title: \"Изменение статуса документа\",\r\n                    key: \"/admin-p/document-status-change\"\r\n                },\r\n                {\r\n                    title: \"Изменение статуса элементов\",\r\n                    key: \"/admin-p/item-status-change\"\r\n                },\r\n            ]\r\n        }\r\n    ];\r\n\r\n\r\n    return (\r\n        <Tree\r\n            checkable\r\n            onExpand={(expandedKeys) => {\r\n                setExpandedKeys(expandedKeys);\r\n                setAutoExpandParent(false);\r\n            }}\r\n            expandedKeys={expandedKeys}\r\n            autoExpandParent={autoExpandParent}\r\n            onCheck={(values) => { props.onChange(values) }}\r\n            checkedKeys={props.value}\r\n            treeData={treeData}\r\n            disabled={props.disabled}\r\n        />\r\n    );\r\n});\r\n\r\nexport default DocumentPositionsPage;","import {\r\nEyeInvisibleOutlined, EyeTwoTone\r\n} from '@ant-design/icons';\r\n\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\nimport { Divider,\r\nInput,\r\nLayout,\r\nButton,\r\nSpace,\r\nnotification,\r\nStatistic} from 'antd';\r\nimport Header1 from \"../../core/Header1\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport {useUser} from '../../core/functions';\r\n\r\nconst { Sider, Content} = Layout;\r\n\r\n//конфигуратор запросов graphql\r\n\r\nconst updateUserPassword = gql`\r\n  mutation updatePassword(\r\n    $username: String\r\n    $password: String\r\n  ) {\r\n    updatePassword(username: $username, password: $password) {\r\n\t  username\r\n      password\r\n\t  \r\n    }\r\n  }\r\n`;\r\n\r\nconst versionCheck = gql`\r\n\tquery application($application: JSON){\r\n  application(application: $application){\r\n    platform_version,\r\n    database_version\r\n  }\r\n}`; \r\n\r\nlet Account = React.memo((props) => {\r\n\tconst [password, setPassword] = useState();\r\n\tconst [password2, setPassword2] = useState();\r\n\tconst [oldpassword, setOldPassword] = useState(\"1447\");\r\n\tconst [load, setLoad] = useState();\r\n\t\r\n\tconst getUser = useUser();\r\n\tconst username=getUser.username;\t\r\n\r\n    const [dataPassword, { loading:loadingMutation, error:errorMutation }] = useMutation(updateUserPassword, {\r\n\t\tonCompleted: (data) => console.log(\"Data from mutation\", data),\r\n\t\tonError: (error) => console.error(\"Error creating a post\", error)\r\n\t});\r\n\t\r\n\tconst { loading, data:versionData, refetch } = useQuery(versionCheck);\r\n\r\n\t        useEffect(() => {\r\n            if (!loadingMutation) {\r\n                if (errorMutation) {\r\n                    notification['error']({ message: (error) => error, duration: 0, placement: 'topLeft'  })\r\n                }\r\n            }\r\n        }, [errorMutation]);\r\n\t\t\r\n\t\tuseEffect(() => {\r\n            if (!loadingMutation) {\r\n                if (load===\"0\") {\r\n                    notification['info']({ message: \"Пароль изменён\", duration: 0, placement: 'topLeft'  });\r\n\t\t\t\t\tsetLoad(\"1\");\r\n\t\t\t\t\tconsole.log(load);\r\n                }\r\n            }\r\n        }, [(data)=>data,load]);\r\n\t\r\n  \r\n  \tlet handlerPasswordChange = () => {\r\n\t\tif (password===password2 && password.length>0 && password2.length>0) {\r\n\t\t\tsetLoad(\"0\");\r\n    dataPassword({ variables: { username,password} });\r\n\t\t}\r\n\t\telse {\r\n\t\tnotification['error']({ message: \"Пароли не совпадают или не введены\", duration: 0, placement: 'topLeft'  })\r\n\t\t}\r\n  }\r\n  \r\n   \tlet handlerInput1 = (e) => {\r\n    setPassword(e.target.value);\r\n\tconsole.log(password)\r\n  }\r\n  \r\n   \tlet handlerInput2 = (e) => {\r\n\tsetPassword2(e.target.value)\r\n\tconsole.log(password2)\r\n  }\r\n  \r\n    let handlerInput3 = (e) => {\r\n\tsetOldPassword(e.target.value)\r\n\tconsole.log(oldpassword)\r\n  }\r\n  \r\n    return (\r\n\t\t\t<>\r\n            <Layout>\r\n                <Header1 title={'Аккаунт'} user={getUser}/>\r\n                <Layout>\r\n                    <Sider theme=\"dark\" style={{color:\"#fff\"}}\r\n                    >\r\n                        <Divider style={{margin: '0 0 7px 0', top: 0}}/>\r\n\t\t\t\t\t\t<h1 style={{color:\"#fff\"}}>Настройки аккаунта</h1>\r\n\t\t\t\t\t\t<Statistic title=\"Версия платформы\" value={(versionData && versionData.application && versionData.application[0]!=null) ? versionData.application[0].platform_version :null}/>\r\n\t\t\t\t\t\t<Statistic title=\"Версия БД\" value={(versionData && versionData.application && versionData.application[0]!=null) ? versionData.application[0].database_version :null}/>\r\n\t\t\t\t\t\t</Sider>\r\n\t\t\t\t\t\t<Content>\r\n\t\t\t\t\t\t<Space direction=\"vertical\">\t\r\n\t\t\t\t\t\t<h1> Функция смены пароля </h1>\t\t\t\t\t \r\n\t\t\t\t\t\t<h1> Введите новый пароль 2 раза </h1>\t\t\t\t\t \r\n\t\t\t\t\t\t\t<Input.Password placeholder=\"Введите новый пароль\" value={password} onChange={handlerInput1} className=\"accountInput\" iconRender={visible => (visible ? <EyeTwoTone className='accountEyeTwoTone' style={{color:\"#2C3E50\" }}/> : <EyeInvisibleOutlined className='accountEyeTwoTone' style={{color:\"#2C3E50\" }}/>)}/>\r\n\t\t\t\t\t\t\t<Input.Password onChange={handlerInput2} value={password2}\r\n\t\t\t\t\t\t\t  placeholder=\"Введите новый пароль\"\r\n\t\t\t\t\t\t\t  iconRender={visible => (visible ? <EyeTwoTone className='accountEyeTwoTone' style={{color:\"#2C3E50\" }}/> : <EyeInvisibleOutlined className='accountEyeTwoTone' style={{color:\"#2C3E50\" }}/>)}\r\n\t\t\t\t\t\t\t  className=\"accountInput\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Button onClick={handlerPasswordChange}>Сменить пароль</Button>\r\n\t\t\t\t\t\t  </Space>\r\n\t\t\t\t\t   \r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n        </>\r\n\t)\r\n});\r\n\r\n\r\nexport default Account;","import React from \"react\";\r\nexport const Context = React.createContext();","import { Menu, Dropdown } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\n\n\nlet DropdownMenuRow = (props) => {\n    const menu = (\n        <Menu onClick={props.onClick} >\n            <Menu.Item key=\"0\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\">\n                    Преподаватель информатики\n                </a>\n            </Menu.Item>\n            <Menu.Item key=\"1\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\">\n                    Архитектор ПО\n                </a>\n            </Menu.Item>\n            <Menu.Item key=\"2\" >\n            <a target=\"_blank\" rel=\"noopener noreferrer\">\n                    Строитель\n                </a>\n            </Menu.Item>\n        </Menu>\n    );\n\n    return (\n        <>\n            <Dropdown  overlay={menu} trigger={['click']} >\n                <a className=\"ant-dropdown-link\" style={{color:'white'}} onClick={e => e.preventDefault()}>\n                    Специальности <DownOutlined />\n                </a>\n            </Dropdown>\n        </>)\n}\n\nexport default DropdownMenuRow;","import { Timeline, Typography, Card, Row } from 'antd';\nimport { ClockCircleOutlined, CloseCircleOutlined } from '@ant-design/icons';\nimport { useState } from 'react';\n\nlet StudyLine = (props) => {\n    console.log(props);\n    const [path, setPath] = useState(props.path)\n    return (\n        <>\n            <Typography.Text style={{ marginBottom: '20px' }} strong>Timeline обучающегося</Typography.Text>\n            <Row>\n\n\n                <Timeline mode=\"right\">\n                    <Timeline.Item>Начало обучения</Timeline.Item>\n                    <Timeline.Item>Сдача государственных экзаменов</Timeline.Item>\n                    <Timeline.Item>Выбор профильных предметов ЕНТ</Timeline.Item>\n                    <Timeline.Item dot={<ClockCircleOutlined className=\"timeline-clock-icon\" />} color=\"green\" >Выбор специальности</Timeline.Item>\n                    <Timeline.Item dot={props.path == 2 ? <CloseCircleOutlined /> : <ClockCircleOutlined />} color={props.path == 2 ? \"red\" : \"grey\"}>Начало профильного обучения</Timeline.Item>\n                </Timeline>\n                <Card style={{marginLeft:'20px', width: 300 }}>\n                    {props.path != 2 ?<p>С учетом анализа интересов, успеваемости и\n                    выбранных профильных предметов, данная специальность\n                    может быть расмотренна как предпочтительная</p>:\n                    <p>На основе проведенного анализа ваших интересов и достижений в учебе,\n                    данная специальность является менее предпочтительной.\n                    Но вы можете воспользоваться курсами и материалами из раздела рекомендаций,\n                    которые помогут подготовится к поступлению на выбранную специальность</p>\n                    }\n                </Card>\n            </Row>\n        </>\n\n    )\n}\n\nexport default StudyLine\n","import { Row, Col, Divider, Dropdown, Menu, Typography } from 'antd';\nimport { useState } from 'react';\nimport { DownOutlined } from '@ant-design/icons';\nimport DropdowmMenuRow from './DropdownMenuRow'\nimport StudyLine from './StudyLine';\n\nconst style = { background: 'rgb(111, 176, 240) ', color: \"white\", padding: '8px 20px' };\n\n\n\nlet StudyGrid = (props) => {\n    const [path, setPath] = useState()\n\n    let onClick = (e) => {\n        console.log(e);\n        setPath(e.key)\n    }\n\n    return (\n        <>\n            <Row gutter={[16, 24]}>\n                {props.edus.map(item => {\n                    return (\n                        <Col className=\"gutter-row\" span={6}>\n                            <div style={style}><Typography.Text style={{ color: 'white' }} strong>{item}</Typography.Text> <DropdowmMenuRow onClick={onClick} /></div>\n                            <div style={style}><Typography.Text style={{ color: 'white' }} underline>Хочу тут учиться</Typography.Text></div>\n                        </Col>\n                    )\n                })}\n            </Row>\n            <Divider type='horizontal'/>\n            <Row>\n                {path!==undefined?<Col offset={10}><StudyLine path={path}/></Col>:null}\n            </Row>\n        </>\n    )\n}\n\nexport default StudyGrid\n\n","import { Divider, Row, Select } from 'antd';\r\nimport { Layout } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport { useUser, accessRedirect } from '../../core/functions';\r\nimport Header1 from '../../core/Header1';\r\nimport { Table, Space, Typography } from 'antd';\r\nimport {\r\n    Form,\r\n    Button,\r\n    DatePicker\r\n} from 'antd';\r\nimport { Context } from \"../../core/Context\";\r\n\r\nimport Search from 'antd/lib/input/Search';\r\nimport { gql, useQuery, useSubscription } from '@apollo/client';\r\nimport { notifyMe } from '../../core/functions';\r\nimport { useHistory } from 'react-router-dom';\r\nimport StudyGrid from './StudyGrid';\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Title } = Typography;\r\nconst pagination = { position: 'bottom' };\r\nconst { Option } = Select;\r\n\r\nconst { Content } = Layout\r\n\r\nlet edus_list = [\r\n    \"Университет 1\",\r\n    \"Колледж 1\",\r\n    \"Университет 2\",\r\n    \"Университет 3\",\r\n    \"Колледж 2\",\r\n    \"Университет 4\",\r\n    \"Университет 5\",\r\n    \"Колледж 3\",\r\n    \"Колледж 4\",\r\n    \"Колледж 6\",\r\n]\r\n\r\nlet specials = [\r\n    {title:'Преподаватель информатики', type_path:1},\r\n    {title:'Архитектор ПО', type_path:2},\r\n    {title:'Строитель', type_path:3},\r\n]\r\n\r\nlet StudyPage = () => {\r\n    const [context, setContext] = useState(\"default context value\");\r\n    const user = useUser();\r\n    \r\n\r\n    return (\r\n        <Context.Provider value={[context, setContext]}>\r\n            <Layout>\r\n                <Header1 title={'Обучение'} user={user} />\r\n                <Layout>\r\n\r\n                    <Layout className=\"content-layout\">\r\n                        <Content className=\"site-layout-background\"\r\n                            style={{\r\n                                padding: 24,\r\n                                margin: 0,\r\n                                minHeight: 280\r\n                            }}>\r\n                            <Row>\r\n                                <Form\r\n                                    layout=\"inline\"\r\n                                    className=\"\"\r\n                                    style={{ margin: 16 }}>\r\n                                    <Form.Item label=\"Поиск по специальностям\">\r\n                                        <Select\r\n                                            showSearch\r\n                                            style={{ width: 200 }}\r\n                                            placeholder=\"Search to Select\"\r\n                                            optionFilterProp=\"children\"\r\n                                            filterOption={(input, option) =>\r\n                                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                            filterSort={(optionA, optionB) =>\r\n                                                optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                                            }\r\n                                        >\r\n                                            {edus_list.map((item,i)=>{\r\n                                                return(<Option value={`${item}`}>{item}</Option>)\r\n                                            })}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Поиск по учебным заведениям\">\r\n                                        <Select\r\n                                            showSearch\r\n                                            style={{ width: 200 }}\r\n                                            placeholder=\"Search to Select\"\r\n                                            optionFilterProp=\"children\"\r\n                                            filterOption={(input, option) =>\r\n                                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                            filterSort={(optionA, optionB) =>\r\n                                                optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                                            }\r\n                                        >\r\n                                            {specials.map(item=>{\r\n                                                return (<Option value={'item'}>{item.title}</Option>)\r\n                                            })}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                </Form>\r\n\r\n                            </Row>\r\n                            <Divider type='horizontal'/>\r\n\r\n                            <StudyGrid specs={specials} edus={edus_list} />\r\n\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n            </Layout>\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport default StudyPage","import { Tag, Input, Typography } from 'antd';\nimport { TweenOneGroup } from 'rc-tween-one';\nimport { PlusOutlined } from '@ant-design/icons';\nimport React from 'react';\n\nclass InterestsTags extends React.Component {\n    state = {\n        tags: ['География', 'Программирование', 'Педогогика', \"IDE\", \"История\"],\n        inputVisible: false,\n        inputValue: '',\n    };\n\n    handleClose = removedTag => {\n        const tags = this.state.tags.filter(tag => tag !== removedTag);\n        console.log(tags);\n        this.setState({ tags });\n    };\n\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    };\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value });\n    };\n\n    handleInputConfirm = () => {\n        const { inputValue } = this.state;\n        let { tags } = this.state;\n        if (inputValue && tags.indexOf(inputValue) === -1) {\n            tags = [...tags, inputValue];\n        }\n        console.log(tags);\n        this.setState({\n            tags,\n            inputVisible: false,\n            inputValue: '',\n        });\n    };\n\n    saveInputRef = input => {\n        this.input = input;\n    };\n\n    forMap = tag => {\n        const tagElem = (\n            <Tag\n                closable\n                onClose={e => {\n                    e.preventDefault();\n                    this.handleClose(tag);\n                }}\n            >\n                {tag}\n            </Tag>\n        );\n        return (\n            <span key={tag} style={{ display: 'inline-block' }}>\n                {tagElem}\n            </span>\n        );\n    };\n\n    render() {\n        const { tags, inputVisible, inputValue } = this.state;\n        const tagChild = tags.map(this.forMap);\n        return (\n            <>\n                <div style={{ marginBottom: 16 }}>\n                    <Typography.Text>\n                        Ваши интересы\n                    </Typography.Text>\n                    <TweenOneGroup\n                        enter={{\n                            scale: 0.8,\n                            opacity: 0,\n                            type: 'from',\n                            duration: 100,\n                        }}\n                        onEnd={e => {\n                            if (e.type === 'appear' || e.type === 'enter') {\n                                e.target.style = 'display: inline-block';\n                            }\n                        }}\n                        leave={{ opacity: 0, width: 0, scale: 0, duration: 200 }}\n                        appear={false}\n                    >\n                        {tagChild}\n                    </TweenOneGroup>\n                </div>\n                {inputVisible && (\n                    <Input\n                        ref={this.saveInputRef}\n                        type=\"text\"\n                        size=\"small\"\n                        style={{ width: 78 }}\n                        value={inputValue}\n                        onChange={this.handleInputChange}\n                        onBlur={this.handleInputConfirm}\n                        onPressEnter={this.handleInputConfirm}\n                    />\n                )}\n                {!inputVisible && (\n                    <Tag onClick={this.showInput} className=\"site-tag-plus\">\n                        <PlusOutlined /> New Tag\n                    </Tag>\n                )}\n            </>\n        );\n    }\n}\n\nexport default InterestsTags","import { Form, Input, Button, Typography } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\n\nconst formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 4 },\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 20 },\n    },\n};\nconst formItemLayoutWithOutLabel = {\n    wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n    },\n};\n\nconst InterestsAccounts = (props) => {\n    const onFinish = values => {\n        console.log('Received values of form:', values);\n    };\n\n    return (\n        <>\n            <Typography.Text>\n                Привязанные аккунты {props.type_acc}\n            </Typography.Text>\n            <Form name=\"dynamic_form_item\" {...formItemLayoutWithOutLabel} onFinish={onFinish}>\n                <Form.List\n                    name=\"names\"\n                    rules={[\n                        {\n                            validator: async (_, names) => {\n                                if (!names || names.length < 2) {\n                                    return Promise.reject(new Error('Есть пустое поле'));\n                                }\n                            },\n                        },\n                    ]}\n                >\n                    {(fields, { add, remove }, { errors }) => (\n                        <>\n                            {fields.map((field, index) => (\n                                <Form.Item\n                                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                                    label={index === 0 ? `Аккунты ${props.type_acc}` : ''}\n                                    required={false}\n                                    key={field.key}\n                                >\n                                    <Form.Item\n                                        {...field}\n                                        validateTrigger={['onChange', 'onBlur']}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                whitespace: true,\n                                                message: \"Введите ваш аккаунт стороннего сервиса\",\n                                            },\n                                        ]}\n                                        noStyle\n                                    >\n                                        <Input placeholder=\"Введеите логин акккаунта\" style={{ width: '60%' }} />\n                                    </Form.Item>\n                                    {fields.length > 1 ? (\n                                        <MinusCircleOutlined\n                                            className=\"dynamic-delete-button\"\n                                            onClick={() => remove(field.name)}\n                                        />\n                                    ) : null}\n                                </Form.Item>\n                            ))}\n                            <Form.Item>\n                                <Button\n                                    onClick={() => add()}\n                                    style={{ width: '60%' }}\n                                    icon={<PlusOutlined />}\n                                >\n                                    Добавить аккаунт\n                                </Button>\n                                <Form.ErrorList errors={errors} />\n                            </Form.Item>\n                        </>\n                    )}\n                </Form.List>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Сохранить\n                    </Button>\n                </Form.Item>\n            </Form>\n        </>\n    );\n};\n\nexport default InterestsAccounts","import { List, Typography, Divider } from 'antd';\nimport { NavLink } from 'react-router-dom/cjs/react-router-dom.min';\n\nlet InterestsProf = (props) => {\n    return (\n        <List\n            size=\"large\"\n            header={<div><Typography.Text strong>Профессии, которые вас могут заинтересовать</Typography.Text></div>}\n            // footer={<div>Footer</div>}\n            bordered\n            dataSource={props.prof_data}\n            renderItem={item => <List.Item> <NavLink to=\"/study-page\">{item}</NavLink></List.Item>}\n        />\n    )\n}\n\nexport default InterestsProf","import { Divider, Row, Col, Select, Tag } from 'antd';\nimport { Layout } from 'antd';\nimport React, { useState } from 'react';\nimport { useUser, accessRedirect } from '../../core/functions';\nimport Header1 from '../../core/Header1';\nimport { Table, Space, Typography } from 'antd';\nimport {\n    Form,\n    Button,\n    DatePicker\n} from 'antd';\nimport { Context } from \"../../core/Context\";\n\nimport Search from 'antd/lib/input/Search';\nimport { gql, useQuery, useSubscription } from '@apollo/client';\nimport { notifyMe } from '../../core/functions';\nimport { useHistory } from 'react-router-dom';\nimport InterestsTags from './InterestsTags';\nimport InterestsAccounts from './InterestsAccounts';\nimport InterestsProf from './InterestsProf';\n\n\nconst { RangePicker } = DatePicker;\nconst { Title } = Typography;\nconst pagination = { position: 'bottom' };\nconst { Option } = Select;\n\nconst { Content } = Layout\n\n\nlet InterestsPage = () => {\n    const [context, setContext] = useState(\"default context value\");\n    const user = useUser();\n    const [tags, setTags] = useState(['Tag 1', 'Tag 2', 'Tag 3'])\n    const [inputVisible, setInputVisible] = useState()\n    const [inputValue, setInputValue] = useState('')\n\n    let list_prof = [\n        \"Учитель информатики\",\n        \"Архитектор программного обеспечения\"\n    ]\n\n    const style = { background: '#0092ff', padding: '8px 0' };\n\n    return (\n        <Context.Provider value={[context, setContext]}>\n            <Layout>\n                <Header1 title={'Интересы'} user={user} />\n                <Layout>\n\n                    <Layout className=\"content-layout\">\n                        <Content className=\"site-layout-background\"\n                            style={{\n                                padding: 24,\n                                margin: 0,\n                                // minHeight: 280\n                            }}>\n                            <Divider type='horizontal' />\n                            <InterestsTags />\n                            <Divider type='horizontal' />\n                            <Row>\n                                <Col flex={3}>\n                                    <div>\n                                        <InterestsAccounts type_acc={\"Litres\"} />\n                                        <InterestsAccounts type_acc={\"Kundelik\"} />\n                                        <InterestsAccounts type_acc={\"Google.Account\"} />\n                                    </div>\n                                </Col>\n\n                                <Col flex={1}>\n                                    <div>\n                                        <InterestsProf prof_data={list_prof} />\n                                    </div>\n                                </Col>\n                            </Row>\n\n                        </Content>\n                    </Layout>\n                </Layout>\n            </Layout>\n        </Context.Provider>\n    )\n}\n\nexport default InterestsPage","import React from 'react';\nimport 'antd/dist/antd.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport constants from \"./config/constants\";\n\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport {\n\tDesktopOutlined,\n\tBarChartOutlined,\n\tDatabaseOutlined,\n\tClockCircleOutlined\n} from '@ant-design/icons';\nimport { ApolloLink } from '@apollo/client';\nimport { onError } from \"@apollo/client/link/error\";\n\nimport { split, HttpLink } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { setContext } from '@apollo/client/link/context';\n\nimport { ConfigProvider, Layout, Row, notification, Button, Tooltip, Col } from 'antd';\nimport ru_RU from 'antd/lib/locale/ru_RU';\nimport { Route, Redirect, Switch, BrowserRouter, useLocation, NavLink } from 'react-router-dom';\nimport { accessRedirect, useUser } from \"./core/functions\";\nimport Header1 from \"./core/Header1\";\nimport Error404 from \"./modules/Error404\";\nimport Login from './modules/Login';\nimport AdminPanel from \"./components/adminPanel/AdminPanel\";\nimport Account from \"./components/account/Account\";\nimport StudyPage from './components/DocumentControl/StudyPage';\nimport InterestsPage from './components/Interests/InterestsPage';\n\n\nlet { host, port, graphql } = constants;\nlet host1;\n\nconsole.log(\"Starting SD Client. Host is \" + window.SERVER_DATA);\n\n// настройка Apollo Client\n//// для запросов\nconst httpLink = new HttpLink({\n\turi: `https://` + window.SERVER_DATA + `:${port}${graphql.path}`\n});\n//// для подписок\nconst wsLink = new WebSocketLink({\n\turi: `wss://` + window.SERVER_DATA + `:${port}${graphql.path}`,\n\toptions: {\n\t\treconnect: true\n\t}\n});\nconst { Header, Content, Sider } = Layout;\n// errors of above\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n\tif (graphQLErrors)\n\t\tgraphQLErrors.map(({ message, locations, path }) => {\n\t\t\tconsole.log(\n\t\t\t\t`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n\t\t\t)\n\t\t\tconsole.log(\"LOCATION\", locations)\n\t\t}\n\n\n\t\t);\n\n\tif (networkError) {\n\t\tconsole.log(`[Network error]: ${JSON.stringify(networkError)}`);\n\t\tnotification['info']({\n\t\t\tmessage: <div id=\"ant_notification\">Ошибка соединения с сервером IUPC-WEB.<br />Обновите страницу. Если проблема не устранилась через 5 минут, свяжитесь с вашей службой IT.</div>,\n\t\t\tduration: 10, placement: 'bottomRight'\n\t\t})\n\t}\n});\n\n//// добавдение данных в заголовок запроса(POST)\nconst authLink = setContext((_, { headers }) => {\n\t// get the authentication token from local storage if it exists\n\tconst token = localStorage.getItem('token');\n\t// return the headers to the context so httpLink can read them\n\treturn {\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tauthorization: token ? `Bearer ${token}` : \"\",\n\t\t}\n\t}\n});\n//// объединение вышеперечисленного\nconst splitLink = split(\n\t({ query }) => {\n\t\tconst definition = getMainDefinition(query);\n\t\treturn (\n\t\t\tdefinition.kind === 'OperationDefinition' &&\n\t\t\tdefinition.operation === 'subscription'\n\t\t);\n\t},\n\twsLink,\n\tauthLink.concat(httpLink),\n);\n// инициализация клиента\nconst client = new ApolloClient({\n\tlink: ApolloLink.from([errorLink, splitLink]),\n\tcache: new InMemoryCache()\n});\n\n\n\n\nconst StudyPageP =\n\t<Col className='main-menu-col'>\n\t\t<Tooltip placement=\"rightTop\" title=\"\">\n\t\t\t<Button type='solid' className=\"main-menu-button\"><NavLink to=\"study-page\" style={{ fontSize: \"25px\" }}> <DesktopOutlined style={{ marginRight: 7 }} /> Обучение <p className='page-desc'>Информация об учебных <br/>заведений и их приемных <br/>кампаниях</p></NavLink></Button>\n\t\t</Tooltip>\n\t</Col>\nconst InterestsPageP =\n\t<Col className='main-menu-col'>\n\t\t<Tooltip placement=\"rightTop\" title=\"\">\n\t\t\t<Button type='solid' className=\"main-menu-button\"><NavLink to=\"interests-page\" style={{ fontSize: \"25px\" }}> <BarChartOutlined style={{ marginRight: 7 }} /> Интересы <p className='page-desc'>Здесь вы можете пройти <br/>тестирование на профориентацию, <br/>указать свои интересы <br/>и многое другое</p></NavLink></Button>\n\t\t</Tooltip>\n\t</Col>\nconst documentHistoryP =\n\t<Col className='main-menu-col'>\n\t\t<Tooltip placement=\"rightTop\" title=\"\">\n\t\t\t<Button type='solid' className=\"main-menu-button\"><NavLink to=\"document-history\" style={{ fontSize: \"25px\" }}> <ClockCircleOutlined style={{ marginRight: 7 }} />  Рекомендации <p className='page-desc'>В данной разделе вы найдете <br/>рекомендации по выбору учебных <br/>заведений на основе выших <br/>интересов и учебных достижений</p></NavLink></Button>\n\t\t</Tooltip>\n\t</Col>\nconst documentSearchP =\n\t<Col className='main-menu-col'>\n\t\t<Tooltip placement=\"rightTop\" title=\"\">\n\t\t\t<Button type='solid' className=\"main-menu-button\"><NavLink to=\"document-search\" style={{ fontSize: \"25px\" }}><DatabaseOutlined style={{ marginRight: 7 }} /> Поиск <p className='page-desc'>Поиск по ...</p></NavLink></Button>\n\t\t</Tooltip>\n\t</Col>\n\n\n\nlet StartPage = React.memo(() => {\n\tlet { pathname } = useLocation();\n\tconst user = useUser();\n\tconsole.log('user', user)\n\treturn (\n\t\t<Layout>\n\t\t\t<Header1 title={''} user={user} />\n\t\t\t<Layout>\n\t\t\t\t{/* <SiderMenu /> */}\n\t\t\t\t<Layout className=\"content-layout\">\n\t\t\t\t\t<Content className=\"site-layout-background\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tpadding: 0,\n\t\t\t\t\t\t\tmargin: 0,\n\t\t\t\t\t\t\tminHeight: 280\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<div style={{ paddingTop: 50 }}>\n\t\t\t\t\t\t\t<Row justify='center' style={{ margin: \"0\", top: \"50%\", transform: \"translate(0,-50%)\", position: \"absolute\", width: \"99%\" }}>\n\n\t\t\t\t\t\t\t\t{StudyPageP}\n\n\t\t\t\t\t\t\t\t{InterestsPageP}\n\n\t\t\t\t\t\t\t\t{documentHistoryP}\n\n\t\t\t\t\t\t\t\t{documentSearchP}\n\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</Content>\n\t\t\t\t</Layout>\n\t\t\t</Layout>\n\t\t</Layout>\n\t)\n})\n\nlet App = () => {\n\tlet { pathname } = useLocation();\n\tconst user = useUser();\n\n\treturn (\n\t\t<Switch>\n\t\t\t<Route path=\"/login\" component={Login} />\n\t\t\t<Route path=\"/logout\" component={() => { return <></> }} />\n\t\t\t<Route path=\"/\" exact component={StartPage} />\n\t\t\t<Route path=\"/study-page\" component={StudyPage} />\n\t\t\t<Route path=\"/interests-page\" component={InterestsPage} />\n\t\t\t<Route path={\"/admin\"} component={accessRedirect(AdminPanel)}></Route>\n\t\t\t<Route path=\"/account\" component={accessRedirect(Account)} />\n\n\t\t\t<Route component={Error404} />\n\t\t</Switch>\n\t)\n};\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<ApolloProvider client={client}>\n\t\t\t<ConfigProvider locale={ru_RU}>\n\t\t\t\t<App />\n\t\t\t</ConfigProvider>\n\t\t</ApolloProvider>\n\t</BrowserRouter>, document.getElementById('root'))"],"sourceRoot":""}